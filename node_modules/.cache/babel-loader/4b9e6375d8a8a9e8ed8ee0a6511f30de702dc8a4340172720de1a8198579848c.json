{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../api'; // 가정: api는 서버에 요청을 보내는 함수들을 export하는 모듈\n\nexport const getComments = createAsyncThunk('comments/getComments', async () => {\n  const response = await api.getComments(); // 서버에서 댓글을 가져오는 API 요청\n  return response.data;\n});\nexport const deleteComment = createAsyncThunk('comments/deleteComment', async id => {\n  const response = await api.deleteComment(id); // 서버에서 댓글을 삭제하는 API 요청\n  return response.data;\n});\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState: [],\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getComments.fulfilled, (state, action) => {\n      // 댓글을 성공적으로 가져왔을 때의 상태 업데이트 로직\n      return action.payload;\n    }).addCase(deleteComment.fulfilled, (state, action) => {\n      // 댓글을 성공적으로 삭제했을 때의 상태 업데이트 로직\n      return state.filter(comment => comment.id !== action.payload.id);\n    });\n  }\n});\nexport default commentsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","getComments","response","data","deleteComment","id","commentsSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","filter","comment","reducer"],"sources":["/Users/leedoyoung/Desktop/mini-project/src/redux/commentsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../api'; // 가정: api는 서버에 요청을 보내는 함수들을 export하는 모듈\n\nexport const getComments = createAsyncThunk('comments/getComments', async () => {\n  const response = await api.getComments(); // 서버에서 댓글을 가져오는 API 요청\n  return response.data;\n});\n\nexport const deleteComment = createAsyncThunk('comments/deleteComment', async (id) => {\n  const response = await api.deleteComment(id); // 서버에서 댓글을 삭제하는 API 요청\n  return response.data;\n});\n\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState: [],\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getComments.fulfilled, (state, action) => {\n        // 댓글을 성공적으로 가져왔을 때의 상태 업데이트 로직\n        return action.payload;\n      })\n      .addCase(deleteComment.fulfilled, (state, action) => {\n        // 댓글을 성공적으로 삭제했을 때의 상태 업데이트 로직\n        return state.filter((comment) => comment.id !== action.payload.id);\n      });\n  },\n});\n\nexport default commentsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,GAAG,MAAM,QAAQ,CAAC,CAAC;;AAE1B,OAAO,MAAMC,WAAW,GAAGF,gBAAgB,CAAC,sBAAsB,EAAE,YAAY;EAC9E,MAAMG,QAAQ,GAAG,MAAMF,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC,CAAC;EAC1C,OAAOC,QAAQ,CAACC,IAAI;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMC,aAAa,GAAGL,gBAAgB,CAAC,wBAAwB,EAAE,MAAOM,EAAE,IAAK;EACpF,MAAMH,QAAQ,GAAG,MAAMF,GAAG,CAACI,aAAa,CAACC,EAAE,CAAC,CAAC,CAAC;EAC9C,OAAOH,QAAQ,CAACC,IAAI;AACtB,CAAC,CAAC;AAEF,MAAMG,aAAa,GAAGR,WAAW,CAAC;EAChCS,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACX,WAAW,CAACY,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjD;MACA,OAAOA,MAAM,CAACC,OAAO;IACvB,CAAC,CAAC,CACDJ,OAAO,CAACR,aAAa,CAACS,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACnD;MACA,OAAOD,KAAK,CAACG,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACb,EAAE,KAAKU,MAAM,CAACC,OAAO,CAACX,EAAE,CAAC;IACpE,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeC,aAAa,CAACa,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}